<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PythonN天速成之第一天</title>
    <url>/2021/09/06/PythonN%E5%A4%A9%E9%80%9F%E6%88%90%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h3><p>Python是一种解释性、面向对象的语言。能够以很简洁的代码实现一些比较有趣的功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>):</span><br><span class="line">    t.forward(x)</span><br><span class="line">    t.left(<span class="number">59</span>)</span><br></pre></td></tr></table></figure>

<p>python是解释执行，性能较低，一些要求性能的场合最好不要用python去开发。</p>
<span id="more"></span>

<h3 id="程序基本格式"><a href="#程序基本格式" class="headerlink" title="程序基本格式"></a>程序基本格式</h3><ul>
<li><p>恰当的空格，缩进问题</p>
<ul>
<li>逻辑行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。</li>
<li>语句从新列的第一行开始。</li>
<li>缩进风格统一<ul>
<li>Python用缩进而不是{}表示程序块。</li>
<li>每次缩进层次通常使用单个制表符或四个空格，虽然仅需要保证缩进数目统一即可。</li>
<li>单个程序中要使用一种缩进方式：制表符 或 空格，避免混用。</li>
</ul>
</li>
</ul>
</li>
<li><p>Python区分大小写</p>
</li>
<li><p>注释</p>
<ul>
<li>单行注释 使用 #</li>
<li>多行注释 注释的两端使用三个连续单引号’’’</li>
</ul>
</li>
<li><p>使用\作为行连接符</p>
</li>
</ul>
<h3 id="Python程序的构成"><a href="#Python程序的构成" class="headerlink" title="Python程序的构成"></a>Python程序的构成</h3><ul>
<li>Python程序是由模块组成。一个模块对应一个python源文件，一般后缀名是：<code>.py</code>。</li>
<li>模块由语句组成。运行python程序时，按照模块中语句的顺序依次执行。</li>
<li>语句是Python程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等。</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>Python中，一切皆对象。</strong>每个对象由：标识（identity）、类型（type）、value（值）来组成。对象的本质就是：<strong>一个内存块，拥有特定的值，并支持特定类型的相关操作。</strong></p>
<ul>
<li><strong>标识</strong>用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数**id(obj)**可返回对象的标识。</li>
<li><strong>类型</strong>用于标识对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用**type(obj)**获得对象所属的类型。</li>
<li><strong>值</strong>表示对象所存储的数据的信息。使用**print(obj)**可以直接打印出值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 举例如下</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment"># 返回结论</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2632915249520</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在Python中，变量也称为对象的引用。因为，变量存储的就是对象的地址。变量通过地址引用了“对象”。</p>
<p>变量位于：栈内存</p>
<p>对象位于：堆内存</p>
<p><strong>Python是动态类型语言</strong></p>
<p>变量不需要显示声明类型。根据变量引用的对象，python解释器自动确定数据类型。</p>
<p><strong>Python是强类型语言</strong></p>
<p>每个对象都有数据类型，仅支持该类型支持的操作。</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符是用来标识变量、函数、类、模块等的名称</strong>。标识符有如下特定的规则：</p>
<ul>
<li>区分大小写。</li>
<li>第一个字符必须是字母、下划线，其后可以是数字、字母、下划线。</li>
<li>不能使用关键字。</li>
<li>以双下划线开头和结尾的名称通常有特殊含义，尽量避免这种写法。</li>
</ul>
<p>通常，我们约定俗称遵守如下规则：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>规则</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>模块和包名</td>
<td>全小写字母，尽量简单。若多个单词之间用下划线</td>
<td>math,os,sys</td>
</tr>
<tr>
<td>函数名</td>
<td>全小写字母，多个单词之间用下划线隔开</td>
<td>phone_number</td>
</tr>
<tr>
<td>类名</td>
<td>首字母大写，采用驼峰原则</td>
<td>MyPhone</td>
</tr>
<tr>
<td>常量名</td>
<td>全大写字母，多个单词之间使用下划线隔开</td>
<td>MAX_SPEED_SPEED</td>
</tr>
</tbody></table>
<h3 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h3><p>变量的声明和赋值用于将一个变量绑定到一个对象上，格式如下：</p>
<p><strong>变量名 = 表达式</strong></p>
<p>运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象；然后，将这个对象地址赋值给左边的变量。</p>
<ul>
<li>变量在使用前必须被初始化（先被赋值）</li>
<li>可以使用del语句删除不在使用的变量（即该变量从栈中被删除）。</li>
<li>如果对象没有被变量引用，对应堆中的对象也会被python的垃圾回收器进行回收。</li>
</ul>
<p><strong>链式赋值</strong></p>
<p>链式赋值用于同一个对象赋值给多个变量。</p>
<p><code>x = y = 123</code> 相当于 <code>x = 123；y = 123</code></p>
<p><strong>系列解包赋值</strong></p>
<p>系列数据赋值给对应相同个数的变量（个数必须保持一致）</p>
<p><code>a,b,c=4,5,6</code> 相当于 <code>a=4;b=5;c=6</code></p>
<p>我们可以利用这个特性来实现变量的互换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b=b,a</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>Python不支持常量，即没有语法规则限制改变一个常量的值。</strong>我们只能约定常量的命名规则，以及在程序的逻辑上不对常量的值做出修改。</p>
<h3 id="基本内置数据类型"><a href="#基本内置数据类型" class="headerlink" title="基本内置数据类型"></a>基本内置数据类型</h3><p>每个对象都有类型，python中最基本的内置数据类型：</p>
<ul>
<li>整型 int</li>
<li>浮点型 float</li>
<li>布尔型 bool</li>
<li>字符串型 str</li>
</ul>
<p>Python支持整数和浮点数，我们可以对数字做出如下运算：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>//</code>、<code>%</code>、<code>**</code>。其中要注意的是一个斜杠代表浮点数除法，两个斜杠代表整数除法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>+<span class="number">2</span> <span class="comment"># 加</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">30</span>-<span class="number">5</span> <span class="comment"># 减</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>*<span class="number">6</span> <span class="comment"># 乘</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>/<span class="number">2</span> <span class="comment"># 浮点数除法</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>/<span class="number">3</span> <span class="comment"># 浮点数除法</span></span><br><span class="line"><span class="number">2.6666666666666665</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>//<span class="number">3</span> <span class="comment"># 整数除法</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>%<span class="number">3</span> <span class="comment"># 取余</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">3</span> <span class="comment"># 幂</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">13</span>,<span class="number">3</span>) <span class="comment"># divmod()是一个函数，他返回的是一个元组。</span></span><br><span class="line">(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>整数，也就是int类型。Python中，除十进制，还有2进制、8进制和16进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">0b 0B <span class="comment"># 二进制</span></span><br><span class="line">0o 0O <span class="comment"># 八进制</span></span><br><span class="line">0x 0X <span class="comment"># 十六进制</span></span><br></pre></td></tr></table></figure>

<p><strong>使用int()实现类型转换：</strong></p>
<ul>
<li>浮点数直接舍去小数部分。</li>
<li>布尔值True转为1，False转为0。</li>
<li>字符串符合整数格式（浮点数格式不行）则直接转换成对应整数，否则报错。</li>
</ul>
<p><strong>自动转型：</strong></p>
<p>整数和浮点数混合运算时，表达式结果自动转型成浮点数。比如，2+8.0的结果是10.0.</p>
<p><strong>整数可以有多大：</strong></p>
<p>python3中int可以存储任意大小的整数，long被取消，没有“整数溢出”的概念，必要适合做科学计算。</p>
<p><strong>整数缓存问题：</strong></p>
<p>Python仅仅对比较小的整数对象进行缓存（范围为[-5,256]）缓存起来，而非是所有整数对象。也就是说当我们赋一个大于256的整数时，在堆中是不同的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">2267406953264</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">2267406953328</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，这仅仅是在命令行中执行，而在Pycharm或者保存为文件执行时，这一范围被解释器优化了，不在符合上面的要求。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数，称为float。</p>
<p>浮点数用科学计数法标识，比如3.14可以写成314E-2或者314e-2。这些数字在内存中也是按照科学计数法存储。</p>
<p><strong>可使用float()实现类型转换</strong>，并不会改变原有的值，而是产生新的对象。</p>
<p>round(value)可以返回四舍五入的值，并不会改变原有的值，而是产生新的对象。</p>
<p><strong>增强型赋值运算符</strong>：<code>*=</code>、<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>//=</code>、<code>%=</code>、<code>**=</code>等</p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>Python中，把True和False定义成了关键字，但他们本质上还是1和0，甚至可以和数字相加。</p>
<p><strong>比较运算符</strong>：<code>==</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></p>
<p><strong>逻辑运算符</strong>：<code>or</code> <code>and</code> <code>not</code></p>
<p><strong>同一运算符</strong>：同一运算符用于比较两个对象的存储单元，实际比较的是对象的地址。</p>
<ul>
<li><strong>is</strong>：判断两个标识符是不是引用的同一个对象</li>
<li><strong>is not</strong>：判断两个标识符是不是引用的不同的对象</li>
<li>is和==的区别<ul>
<li>is 用于比较对象的地址，即**比较id(obj)**。</li>
<li>== 默认调用对象的<code>_eq_()</code>方法，即**比较print(obj)**。</li>
</ul>
</li>
</ul>
<h3 id="时间的表示"><a href="#时间的表示" class="headerlink" title="时间的表示"></a>时间的表示</h3><p>计算机中时间的表示是从“1970年1月1日00:00:00”开始，以毫秒进行计算，也就是时间戳，这样我们就可以把时间全部用数字来表示了。我们把1970年的这个时刻称为“unix时间点”。</p>
<p>python中通过<code>time.time()</code>来获取当前时刻，返回的值是以秒为单位，带微妙（1/1000毫秒）精度的浮点值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>九月一日晚日记</title>
    <url>/2021/09/02/%E4%B9%9D%E6%9C%88%E4%B8%80%E6%97%A5%E6%99%9A%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="九月一日晚日记"><a href="#九月一日晚日记" class="headerlink" title="九月一日晚日记"></a>九月一日晚日记</h2><p>现在是2021年9月1号晚上十二点多了，应该算是2号了，严格说来。</p>
<p>今天把博客又搭起来了，我有点开心，因为我终于可以有事情做了，或者说我又有动力做了。</p>
<p>之前的那个博客到期了，我也没花精力去找，就让他暂时消失吧，至少在我想复制过来之前。</p>
<span id="more"></span>

<p>之前的博客确实对我找工作帮助挺大的，说实在的，能来这边我之前一直归于我的幸运，但却是和这个总结的习惯是分不开的。</p>
<p>最近自己过的太混了，让自己有一种很强的危机感，总感觉再这么混下去就要被淘汰了，，所以我又搭建起了这个博客，希望用此行为来激发我的学习欲望吧。</p>
<p>也算是给自己一种安全感。</p>
<p>当然这个静态网页还很不完善，今晚才搭起来的，但是现在已经0：21了，有点困了。细节等明天再来搞吧。</p>
<p>我的初步想法是吧前端html js css 后端java python 啥的都学一下，刷一下leetcode，提高一下自己的编码水平。当然，学习其他的东西的总结也可以放在这个上面。</p>
<p>这个以后再说吧，</p>
<p>希望自己能够振作起来，加油！</p>
]]></content>
      <categories>
        <category>随笔日记</category>
      </categories>
      <tags>
        <tag>随笔日记</tag>
      </tags>
  </entry>
  <entry>
    <title>九月二日晚日记</title>
    <url>/2021/09/03/%E4%B9%9D%E6%9C%88%E4%BA%8C%E6%97%A5%E6%99%9A%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="九月二日晚日记"><a href="#九月二日晚日记" class="headerlink" title="九月二日晚日记"></a>九月二日晚日记</h2><p>今天又12点多了，今天就不多写了，希望9/3能够开始吧。</p>
<p>从学python开始，加油！</p>
]]></content>
      <categories>
        <category>随笔日记</category>
      </categories>
      <tags>
        <tag>随笔日记</tag>
      </tags>
  </entry>
</search>
