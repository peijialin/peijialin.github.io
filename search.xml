<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python速成之语言介绍</title>
    <url>/2021/09/06/Python%E9%80%9F%E6%88%90%E4%B9%8B%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h3><p>Python是一种解释性、面向对象的语言。能够以很简洁的代码实现一些比较有趣的功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Pen()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>):</span><br><span class="line">    t.forward(x)</span><br><span class="line">    t.left(<span class="number">59</span>)</span><br></pre></td></tr></table></figure>

<p>python是解释执行，性能较低，一些要求性能的场合最好不要用python去开发。</p>
<span id="more"></span>

<h3 id="程序基本格式"><a href="#程序基本格式" class="headerlink" title="程序基本格式"></a>程序基本格式</h3><ul>
<li><p>恰当的空格，缩进问题</p>
<ul>
<li>逻辑行首的空白（空格和制表符）用来决定逻辑行的缩进层次，从而用来决定语句的分组。</li>
<li>语句从新列的第一行开始。</li>
<li>缩进风格统一<ul>
<li>Python用缩进而不是{}表示程序块。</li>
<li>每次缩进层次通常使用单个制表符或四个空格，虽然仅需要保证缩进数目统一即可。</li>
<li>单个程序中要使用一种缩进方式：制表符 或 空格，避免混用。</li>
</ul>
</li>
</ul>
</li>
<li><p>Python区分大小写</p>
</li>
<li><p>注释</p>
<ul>
<li>单行注释 使用 #</li>
<li>多行注释 注释的两端使用三个连续单引号’’’</li>
</ul>
</li>
<li><p>使用\作为行连接符</p>
</li>
</ul>
<h3 id="Python程序的构成"><a href="#Python程序的构成" class="headerlink" title="Python程序的构成"></a>Python程序的构成</h3><ul>
<li>Python程序是由模块组成。一个模块对应一个python源文件，一般后缀名是：<code>.py</code>。</li>
<li>模块由语句组成。运行python程序时，按照模块中语句的顺序依次执行。</li>
<li>语句是Python程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等。</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>Python中，一切皆对象。</strong>每个对象由：标识（identity）、类型（type）、value（值）来组成。对象的本质就是：<strong>一个内存块，拥有特定的值，并支持特定类型的相关操作。</strong></p>
<ul>
<li><strong>标识</strong>用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数**id(obj)**可返回对象的标识。</li>
<li><strong>类型</strong>用于标识对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用**type(obj)**获得对象所属的类型。</li>
<li><strong>值</strong>表示对象所存储的数据的信息。使用**print(obj)**可以直接打印出值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 举例如下</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="comment"># 返回结论</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2632915249520</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在Python中，变量也称为对象的引用。因为，变量存储的就是对象的地址。变量通过地址引用了“对象”。</p>
<p>变量位于：栈内存</p>
<p>对象位于：堆内存</p>
<p><strong>Python是动态类型语言</strong></p>
<p>变量不需要显示声明类型。根据变量引用的对象，python解释器自动确定数据类型。</p>
<p><strong>Python是强类型语言</strong></p>
<p>每个对象都有数据类型，仅支持该类型支持的操作。</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符是用来标识变量、函数、类、模块等的名称</strong>。标识符有如下特定的规则：</p>
<ul>
<li>区分大小写。</li>
<li>第一个字符必须是字母、下划线，其后可以是数字、字母、下划线。</li>
<li>不能使用关键字。</li>
<li>以双下划线开头和结尾的名称通常有特殊含义，尽量避免这种写法。</li>
</ul>
<p>通常，我们约定俗称遵守如下规则：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>规则</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>模块和包名</td>
<td>全小写字母，尽量简单。若多个单词之间用下划线</td>
<td>math,os,sys</td>
</tr>
<tr>
<td>函数名</td>
<td>全小写字母，多个单词之间用下划线隔开</td>
<td>phone_number</td>
</tr>
<tr>
<td>类名</td>
<td>首字母大写，采用驼峰原则</td>
<td>MyPhone</td>
</tr>
<tr>
<td>常量名</td>
<td>全大写字母，多个单词之间使用下划线隔开</td>
<td>MAX_SPEED_SPEED</td>
</tr>
</tbody></table>
<h3 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h3><p>变量的声明和赋值用于将一个变量绑定到一个对象上，格式如下：</p>
<p><strong>变量名 = 表达式</strong></p>
<p>运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象；然后，将这个对象地址赋值给左边的变量。</p>
<ul>
<li>变量在使用前必须被初始化（先被赋值）</li>
<li>可以使用del语句删除不在使用的变量（即该变量从栈中被删除）。</li>
<li>如果对象没有被变量引用，对应堆中的对象也会被python的垃圾回收器进行回收。</li>
</ul>
<p><strong>链式赋值</strong></p>
<p>链式赋值用于同一个对象赋值给多个变量。</p>
<p><code>x = y = 123</code> 相当于 <code>x = 123；y = 123</code></p>
<p><strong>系列解包赋值</strong></p>
<p>系列数据赋值给对应相同个数的变量（个数必须保持一致）</p>
<p><code>a,b,c=4,5,6</code> 相当于 <code>a=4;b=5;c=6</code></p>
<p>我们可以利用这个特性来实现变量的互换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b=b,a</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>Python不支持常量，即没有语法规则限制改变一个常量的值。</strong>我们只能约定常量的命名规则，以及在程序的逻辑上不对常量的值做出修改。</p>
<h3 id="基本内置数据类型"><a href="#基本内置数据类型" class="headerlink" title="基本内置数据类型"></a>基本内置数据类型</h3><p>每个对象都有类型，python中最基本的内置数据类型：</p>
<ul>
<li>整型 int</li>
<li>浮点型 float</li>
<li>布尔型 bool</li>
<li>字符串型 str</li>
</ul>
<p>Python支持整数和浮点数，我们可以对数字做出如下运算：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>//</code>、<code>%</code>、<code>**</code>。其中要注意的是一个斜杠代表浮点数除法，两个斜杠代表整数除法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>+<span class="number">2</span> <span class="comment"># 加</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">30</span>-<span class="number">5</span> <span class="comment"># 减</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>*<span class="number">6</span> <span class="comment"># 乘</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>/<span class="number">2</span> <span class="comment"># 浮点数除法</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>/<span class="number">3</span> <span class="comment"># 浮点数除法</span></span><br><span class="line"><span class="number">2.6666666666666665</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>//<span class="number">3</span> <span class="comment"># 整数除法</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>%<span class="number">3</span> <span class="comment"># 取余</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">3</span> <span class="comment"># 幂</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">divmod</span>(<span class="number">13</span>,<span class="number">3</span>) <span class="comment"># divmod()是一个函数，他返回的是一个元组。</span></span><br><span class="line">(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>整数，也就是int类型。Python中，除十进制，还有2进制、8进制和16进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">0b 0B <span class="comment"># 二进制</span></span><br><span class="line">0o 0O <span class="comment"># 八进制</span></span><br><span class="line">0x 0X <span class="comment"># 十六进制</span></span><br></pre></td></tr></table></figure>

<p><strong>使用int()实现类型转换：</strong></p>
<ul>
<li>浮点数直接舍去小数部分。</li>
<li>布尔值True转为1，False转为0。</li>
<li>字符串符合整数格式（浮点数格式不行）则直接转换成对应整数，否则报错。</li>
</ul>
<p><strong>自动转型：</strong></p>
<p>整数和浮点数混合运算时，表达式结果自动转型成浮点数。比如，2+8.0的结果是10.0.</p>
<p><strong>整数可以有多大：</strong></p>
<p>python3中int可以存储任意大小的整数，long被取消，没有“整数溢出”的概念，必要适合做科学计算。</p>
<p><strong>整数缓存问题：</strong></p>
<p>Python仅仅对比较小的整数对象进行缓存（范围为[-5,256]）缓存起来，而非是所有整数对象。也就是说当我们赋一个大于256的整数时，在堆中是不同的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">2267406953264</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)</span><br><span class="line"><span class="number">2267406953328</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，这仅仅是在命令行中执行，而在Pycharm或者保存为文件执行时，这一范围被解释器优化了，不在符合上面的要求。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数，称为float。</p>
<p>浮点数用科学计数法标识，比如3.14可以写成314E-2或者314e-2。这些数字在内存中也是按照科学计数法存储。</p>
<p><strong>可使用float()实现类型转换</strong>，并不会改变原有的值，而是产生新的对象。</p>
<p>round(value)可以返回四舍五入的值，并不会改变原有的值，而是产生新的对象。</p>
<p><strong>增强型赋值运算符</strong>：<code>*=</code>、<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>//=</code>、<code>%=</code>、<code>**=</code>等</p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>Python中，把True和False定义成了关键字，但他们本质上还是1和0，甚至可以和数字相加。</p>
<p><strong>比较运算符</strong>：<code>==</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></p>
<p><strong>逻辑运算符</strong>：<code>or</code> <code>and</code> <code>not</code></p>
<p><strong>同一运算符</strong>：同一运算符用于比较两个对象的存储单元，实际比较的是对象的地址。</p>
<ul>
<li><strong>is</strong>：判断两个标识符是不是引用的同一个对象</li>
<li><strong>is not</strong>：判断两个标识符是不是引用的不同的对象</li>
<li>is和==的区别<ul>
<li>is 用于比较对象的地址，即**比较id(obj)**。</li>
<li>== 默认调用对象的<code>_eq_()</code>方法，即**比较print(obj)**。</li>
<li>is 运算符比 == 效率高，在变量和None进行比较的时候，使用is。</li>
</ul>
</li>
</ul>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>有关字符串的相关介绍看下一篇博客。</p>
<h3 id="时间的表示"><a href="#时间的表示" class="headerlink" title="时间的表示"></a>时间的表示</h3><p>计算机中时间的表示是从“1970年1月1日00:00:00”开始，以毫秒进行计算，也就是时间戳，这样我们就可以把时间全部用数字来表示了。我们把1970年的这个时刻称为“unix时间点”。</p>
<p>python中通过<code>time.time()</code>来获取当前时刻，返回的值是以秒为单位，带微妙（1/1000毫秒）精度的浮点值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python速成之字符串</title>
    <url>/2021/09/06/Python%E9%80%9F%E6%88%90%E4%B9%8B%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串的本质是：字符序列。</p>
<p>Python的字符串是不可变的，仅可以将字符串的一部分复制到新创建的字符串，达到“看起来修改”的效果。</p>
<p>Python不支持单子符类型，单字符也是作为一个字符串使用的。</p>
<span id="more"></span>

<h3 id="字符串的编码"><a href="#字符串的编码" class="headerlink" title="字符串的编码"></a>字符串的编码</h3><p>Python3直接支持Unicode，可以表示世界上任何书面语言的字符。Python3的字符默认就是16位Unicode编码，ASCII码是Unicode编码的子集。</p>
<p>使用内置函数**ord()**可以把字符转换成对应的Unicode码；</p>
<p>使用内置函数**chr()**可以把十进制数字转换成对应的字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="built_in">chr</span>(<span class="number">66</span>)</span><br><span class="line"><span class="comment"># 结论</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="引号创建字符串"><a href="#引号创建字符串" class="headerlink" title="引号创建字符串"></a>引号创建字符串</h3><p>我们可以使用单引号或双引号来创建字符串，使用两种引号的好处是可以创建本身就包含引号的字符串，而不用使用转义字符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;I&#x27;m a teacher!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">I<span class="string">&#x27;m a teacher!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b = &#x27;</span>my name <span class="keyword">is</span> <span class="string">&quot;Tom&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(b)</span></span><br><span class="line"><span class="string">my name is &quot;Tom&quot;</span></span><br></pre></td></tr></table></figure>

<p>连续使用三个单引号或三个双引号，可以帮助我们创建多行字符串。</p>
<h3 id="空字符串和len-函数"><a href="#空字符串和len-函数" class="headerlink" title="空字符串和len()函数"></a>空字符串和len()函数</h3><p>Python允许空字符串存在，不包含任何字符且长度为0。**len()**用于计算字符串中含有多少字符（汉字也表示一个字符）。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>我们可以使用<code>\+特殊字符</code>，实现某些难以用字符表示的效果。比如，换行等。常见的转义字符如下：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\(在行尾时)</td>
<td>续行符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠字符</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格(BackSpace)</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>横向制表符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
</tbody></table>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>1、可以使用+将多个字符串拼接起来。</p>
<ul>
<li>如果+两边都是字符串，则拼接。</li>
<li>如果+两边都是数字，则加法运算。</li>
<li>如果+两边类型不同，则抛出异常。</li>
</ul>
<p>2、可以将多个字面字符串直接放到一起实现拼接。</p>
<h3 id="字符串复制"><a href="#字符串复制" class="headerlink" title="字符串复制"></a>字符串复制</h3><p>可以使用<code>*</code>实现字符串复制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> &gt;&gt;&gt; a = <span class="string">&quot;Test&quot;</span>*<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">TestTestTest</span><br></pre></td></tr></table></figure>

<h3 id="不换行打印"><a href="#不换行打印" class="headerlink" title="不换行打印"></a>不换行打印</h3><p>我们可以通过end = “任意字符串”，实现末尾添加任何内容，来替代默认的换行符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test&quot;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 表示使用空字符串来作为本次打印的结束，这样就不用换行了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;AAA&quot;</span>,end=<span class="string">&#x27;\r&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BBB&quot;</span>)</span><br><span class="line"><span class="comment"># 看看下面的结论，思考下理由</span></span><br><span class="line">BBBtAAA</span><br></pre></td></tr></table></figure>

<h3 id="从控制台读取字符串"><a href="#从控制台读取字符串" class="headerlink" title="从控制台读取字符串"></a>从控制台读取字符串</h3><p>我们可以使用**input()**从控制台读取键盘输入的内容。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myaccount = <span class="built_in">input</span>(<span class="string">&quot;请输入账号：&quot;</span>)</span><br><span class="line">mypassword = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您的用户名：&quot;</span> + myaccount)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您的密码：&quot;</span> + mypassword)</span><br></pre></td></tr></table></figure>

<p>如果我们不想要密码显示在控制台，可以使用getpass模块中的**getpass()**方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">myaccount = <span class="built_in">input</span>(<span class="string">&quot;请输入账号：&quot;</span>)</span><br><span class="line">mypassword = getpass.getpass(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您的用户名：&quot;</span> + myaccount)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您的密码：&quot;</span> + mypassword)</span><br></pre></td></tr></table></figure>

<h3 id="str-实现数字转型字符串"><a href="#str-实现数字转型字符串" class="headerlink" title="str()实现数字转型字符串"></a>str()实现数字转型字符串</h3><p>str()可以帮助我们将其他数据类型转换成字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="number">5.20</span>) <span class="comment"># --&gt; &#x27;5.20&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">3.14e2</span>) <span class="comment"># --&gt; &#x27;314.0&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(<span class="literal">True</span>) <span class="comment"># --&gt; &#x27;True&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当我们调用print()函数时，解释器自动调用了str()将非字符串的对象转换成了字符串。</p>
<h3 id="使用-提取字符"><a href="#使用-提取字符" class="headerlink" title="使用[]提取字符"></a>使用[]提取字符</h3><p>字符串的本质就是<strong>字符序列</strong>，我们可以通过在字符串后面添加[]，在[]里面指定偏移量来提取在该位置的单个字符。</p>
<ul>
<li>正向搜索<ul>
<li>最左侧第一个字符，偏移量是0，第二个偏移量是1，以此类推。直到len(str)-1为止。</li>
</ul>
</li>
<li>反向搜索<ul>
<li>最右侧第一个字符，偏移量是-1，第二个偏移量是-2，以此类推。直到-len(str)为止。</li>
</ul>
</li>
</ul>
<h3 id="replace-实现字符串替换"><a href="#replace-实现字符串替换" class="headerlink" title="replace()实现字符串替换"></a>replace()实现字符串替换</h3><p>字符串是“不可改变”的，我们通过[]可以获取字符串指定为止的字符，但是我们不能改变字符串。</p>
<p>使用**replace()**替换字符串实际上是新创建了一个字符串对象。</p>
<p>并且该变量指向这个新的对象，原来的对象会被Python的垃圾回收器进行回收。</p>
<h3 id="字符串切片slice操作"><a href="#字符串切片slice操作" class="headerlink" title="字符串切片slice操作"></a>字符串切片slice操作</h3><p>切片slice操作可以让我们快速的提取子字符串，标准格式为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[起始偏移量start：终止偏移量 end：步长 step]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>包头不报尾</li>
<li>可以用负数，包括步长。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 &quot;to be or not to be&quot;倒叙输出</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;to be or not to be&#x27;</span></span><br><span class="line">str2 = <span class="built_in">str</span>[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure>

<h3 id="split-分割和join-合并"><a href="#split-分割和join-合并" class="headerlink" title="split()分割和join()合并"></a>split()分割和join()合并</h3><p>**split()**可以基于指定分隔符将字符串分隔成多个子字符串（存储到列表中）。如果不指定分隔符，则默认使用空白字符（换行符、空格、制表符）。</p>
<p>**join()**的作用和split()作用相反，用于将一系列子字符串连接起来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;to be or not to be&#x27;</span></span><br><span class="line">result = <span class="built_in">str</span>.split()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">str2 = <span class="string">&#x27; &#x27;</span>.join(result)</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure>

<p>代码运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;be&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;be&#x27;</span>]</span><br><span class="line">to be <span class="keyword">or</span> <span class="keyword">not</span> to be</span><br></pre></td></tr></table></figure>

<p><strong>拼接字符串要点</strong>：</p>
<p>使用字符串拼接符+，每使用一次，就会生成一个新的字符串对象，因此<code>a+b+c+d</code>这种会生成三个对象，比较浪费性能。</p>
<p>使用join()函数在拼接字符串之前会计算所有字符串的长度，然后逐一拷贝，仅新建一次对象。</p>
<h3 id="字符串驻留机制和字符串比较"><a href="#字符串驻留机制和字符串比较" class="headerlink" title="字符串驻留机制和字符串比较"></a>字符串驻留机制和字符串比较</h3><p><strong>字符串驻留</strong>：仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串驻留池中。Python支持字符串驻留机制，<strong>对于符合标识符规则的字符串（仅包含下划线、字母和数字），会启用字符串驻留机制。</strong></p>
<p>因为python字符串是“不可变的”，所以，使用字符串驻留机制也没什么影响。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;abc_11&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">&quot;abc_11&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="string">&quot;dd%&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="string">&quot;dd%&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c <span class="keyword">is</span> d</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c == d</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串的比较和同一性"><a href="#字符串的比较和同一性" class="headerlink" title="字符串的比较和同一性"></a>字符串的比较和同一性</h3><p>我们可以直接使用==，!= 对字符串进行比较，是否含有相同的字符。</p>
<p>我们使用is 、not is，判断两个对象是否为同一对象，比较的是对象的地址，即<code>id(obj1)</code>是否与<code>id(obj2)</code>相等。</p>
<h3 id="成员操作符"><a href="#成员操作符" class="headerlink" title="成员操作符"></a>成员操作符</h3><p>in/not in 关键字，判断某个字符串（子字符串）是否存在于字符串中。</p>
<h3 id="字符串常用查找方法"><a href="#字符串常用查找方法" class="headerlink" title="字符串常用查找方法"></a>字符串常用查找方法</h3><table>
<thead>
<tr>
<th>方法和使用示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>len(a)</td>
<td>字符串长度</td>
</tr>
<tr>
<td>a.startswith(“AAA”)</td>
<td>以指定字符串开头</td>
</tr>
<tr>
<td>a.endswith(“BBB”)</td>
<td>以指定字符串结尾</td>
</tr>
<tr>
<td>a.find(‘Test’)</td>
<td>第一次出现字符串的位置</td>
</tr>
<tr>
<td>a.rfind(‘Test’)</td>
<td>最后一次出现字符串的位置</td>
</tr>
<tr>
<td>a.count(‘Test’)</td>
<td>指定字符串出现了几次</td>
</tr>
<tr>
<td>a.isalnum()</td>
<td>判断所有字符是否全是字母或数字</td>
</tr>
</tbody></table>
<h3 id="去除首尾信息"><a href="#去除首尾信息" class="headerlink" title="去除首尾信息"></a>去除首尾信息</h3><ul>
<li>我们可以通过strip()去除字符串首尾指定信息，如果括号内不写，则表示去除空白符。</li>
<li>通过lstrip()去除字符串左边指定信息。</li>
<li>通过rstrip()去除字符串右边指定信息。</li>
</ul>
<h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>a.capitalize()</td>
<td>产生新的字符串，首字母大写</td>
</tr>
<tr>
<td>a.title()</td>
<td>产生新的字符串，每个单词首字母大写</td>
</tr>
<tr>
<td>a.upper()</td>
<td>产生新的字符串，所有字符全转换成大写</td>
</tr>
<tr>
<td>a.lower()</td>
<td>产生新的字符串，所有字符全转换成小写</td>
</tr>
<tr>
<td>a.swapcase()</td>
<td>产生新的字符串，所有字母大小写切换</td>
</tr>
</tbody></table>
<h3 id="字符串其他方法"><a href="#字符串其他方法" class="headerlink" title="字符串其他方法"></a>字符串其他方法</h3><table>
<thead>
<tr>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>isalnum()</td>
<td>是否为字母或数字</td>
</tr>
<tr>
<td>isalpha()</td>
<td>用于见此字符串是否只由字母组成（含汉字）</td>
</tr>
<tr>
<td>isdigit()</td>
<td>检测字符串是否只有数字组成</td>
</tr>
<tr>
<td>isspace()</td>
<td>检查是否为空白符</td>
</tr>
<tr>
<td>isupper()</td>
<td>检查是否为大写字母</td>
</tr>
<tr>
<td>islower()</td>
<td>检查是否为小写字母</td>
</tr>
</tbody></table>
<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><h4 id="format-基本用法"><a href="#format-基本用法" class="headerlink" title="format()基本用法"></a>format()基本用法</h4><p>字符串格式化语法是通过{}来替代字符串的位置，用于我们后续的扩充。举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">myaccount = <span class="built_in">input</span>(<span class="string">&quot;请输入账号：&quot;</span>)</span><br><span class="line">mypassword = getpass.getpass(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引来进行对字符串的格式化</span></span><br><span class="line">str1 = <span class="string">&quot;您的用户名为：&#123;0&#125;，对应的密码是：&#123;1&#125;，请确认&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.<span class="built_in">format</span>(myaccount,mypassword))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过参数名来精确定位</span></span><br><span class="line">str2 = <span class="string">&quot;您的用户名为：&#123;username&#125;，对应的密码是：&#123;password&#125;，请确认&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str2.<span class="built_in">format</span>(password=mypassword,username=myaccount))</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入账号：AAA</span><br><span class="line">请输入密码：</span><br><span class="line">您的用户名为：AAA，对应的密码是：CCC，请确认</span><br><span class="line">您的用户名为：AAA，对应的密码是：CCC，请确认</span><br></pre></td></tr></table></figure>

<p>从上面的例子可知，我们可以通过{索引}或者{参数名}，直接映射参数值，实现对字符串的格式化，非常方便。</p>
<h4 id="填充与对其"><a href="#填充与对其" class="headerlink" title="填充与对其"></a>填充与对其</h4><p>填充常跟对其一起使用</p>
<p><code>^</code> <code>&lt;</code> <code>&gt;</code>分别是居中、左对齐、右对齐，后面带宽度。<code>:</code>后面带填充的字符，只能是一个字符，不指定的话默认使用空格填充。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我是&#123;0&#125;,我喜欢数字&#123;1:*&gt;8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;888&quot;</span>)</span><br><span class="line"><span class="string">&#x27;我是AAA,我喜欢数字*****888&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我是&#123;0&#125;,我喜欢数字&#123;1:*&lt;8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;888&quot;</span>)</span><br><span class="line"><span class="string">&#x27;我是AAA,我喜欢数字888*****&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我是&#123;0&#125;,我喜欢数字&#123;1:*^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;AAA&quot;</span>,<span class="string">&quot;888&quot;</span>)</span><br><span class="line"><span class="string">&#x27;我是AAA,我喜欢数字**888***&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><p>浮点数通过f，整数通过d进行需要的格式化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;我是&#123;0&#125;,我喜欢数字&#123;1:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;AAA&quot;</span>,<span class="number">0.0789</span>)</span><br><span class="line"><span class="string">&#x27;我是AAA,我喜欢数字0.08&#x27;</span></span><br></pre></td></tr></table></figure>

<p>其余的这里就不再赘述，需要时请自行百度。</p>
<h3 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h3><p>在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能创建新的字符串对象。这对于那种频繁修改字符串的需求，这种性能的消耗是无法忍受的，因此，我们可以使用<code>io.StringIO</code>对象或<code>array</code>模块。</p>
]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Python速成之列表</title>
    <url>/2021/09/07/Python%E9%80%9F%E6%88%90%E4%B9%8B%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>序列是一种数据存储方式，用来存储一系列的数据。<strong>在内存中，序列就是一块用来存放多个值的连续的内存空间。</strong>变量的地址一般来说是第一个值的地址。python中常用的序列结构有：</p>
<p><strong>字符串、列表、元组、字典和集合</strong></p>
<p>序列中存储的是对象的地址，因此列表的每个位置都是占用相同大小的内存。</p>
<span id="more"></span>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表<strong>用于存储任意数目、任意类型的数据集合。</strong>列表是内置可变序列，是包含多个元素的有序连续的内存空间。列表中的元素可以各不相同，可以是任意类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="literal">True</span>]</span><br></pre></td></tr></table></figure>

<p>Python列表大小可变，根据需要随时增大或缩小。</p>
<p>列表常用方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>要点</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>list.append(x)</td>
<td>增加元素</td>
<td>将元素x增加到列表list尾部</td>
</tr>
<tr>
<td>list.extend(aList)</td>
<td>增加元素</td>
<td>将列表aList所有元素加到列表list尾部</td>
</tr>
<tr>
<td>list.insert(index,x)</td>
<td>增加元素</td>
<td>在列表list指定位置index处插入元素x</td>
</tr>
<tr>
<td>list.remove(x)</td>
<td>删除元素</td>
<td>在列表list中删除首次出现的指定元素x</td>
</tr>
<tr>
<td>list.pop([index])</td>
<td>删除元素</td>
<td>删除并返回列表list指定位置index处的元素（单个），不填默认是最后一个元素</td>
</tr>
<tr>
<td>list.clear()</td>
<td>删除元素</td>
<td>删除列表所有元素，并不是删除列表对象</td>
</tr>
<tr>
<td>list.index(x)</td>
<td>访问元素</td>
<td>返回第一个x的索引位置，若不存在x元素抛出异常</td>
</tr>
<tr>
<td>list.acount(x)</td>
<td>计数</td>
<td>返回指定元素x在列表list中出现的次数</td>
</tr>
<tr>
<td>len(list)</td>
<td>列表长度</td>
<td>返回列表中包含元素的个数</td>
</tr>
<tr>
<td>list.reverse()</td>
<td>翻转列表</td>
<td>所有元素原地翻转</td>
</tr>
<tr>
<td>list.sort()</td>
<td>排序</td>
<td>所有元素原地排序，不建立新的列表，默认升序</td>
</tr>
<tr>
<td>list.sort(reverse=True)</td>
<td>排序</td>
<td>所有元素原地排序，降序排列</td>
</tr>
<tr>
<td>list.copy()</td>
<td>浅拷贝</td>
<td>返回列表对象的浅拷贝</td>
</tr>
<tr>
<td>max(list)</td>
<td>最大值</td>
<td>返回列表中的最大值</td>
</tr>
<tr>
<td>min(list)</td>
<td>最小值</td>
<td>返回列表中的最小值</td>
</tr>
<tr>
<td>sum(list)</td>
<td>求和</td>
<td>对数值型列表所有元素求和，若列表中存在非数值型元素，运算则会报错</td>
</tr>
</tbody></table>
<h3 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h3><h4 id="基本语法-创建"><a href="#基本语法-创建" class="headerlink" title="基本语法[]创建"></a>基本语法[]创建</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">10</span>,<span class="number">20</span>,<span class="literal">True</span>,<span class="string">&quot;Test&quot;</span>]</span><br><span class="line">&gt;&gt;&gt;a = [] <span class="comment">#创建一个空列表</span></span><br></pre></td></tr></table></figure>

<h4 id="list-创建"><a href="#list-创建" class="headerlink" title="list()创建"></a>list()创建</h4><p>使用list()可以将任何可迭代的数据转化成列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>() <span class="comment"># 创建一个新的列表对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h4 id="range-创建整数列表"><a href="#range-创建整数列表" class="headerlink" title="range()创建整数列表"></a>range()创建整数列表</h4><p>range()可以帮助我们非常方便的创建整数列表，其语法格式为：<code>range([start,]end[,step])</code></p>
<ul>
<li>start 参数：可选，表示其实数字，默认是0</li>
<li>end参数：必选，便是结尾数字</li>
<li>step参数：可选，便是步长，默认是1，可以是负数。</li>
</ul>
<p>Python3中range()返回的是一个range对象，而不是列表。因此，需要通过list()方法将其转换成列表对象。</p>
<h4 id="推导式生成列表"><a href="#推导式生成列表" class="headerlink" title="推导式生成列表"></a>推导式生成列表</h4><p>使用列表推导式可以非常方便的创建列表，与for循环结合使用</p>
<h3 id="列表的增加"><a href="#列表的增加" class="headerlink" title="列表的增加"></a>列表的增加</h3><p>当列表增加或者删除元素时，列表会自动进行内存管理，大大减少了程序员的负担。但这个特点（顺序表）涉及列表元素的大量移动，效率较低。除非必要，我们一般只在列表的尾部添加或删除元素，这会大大提高列表的操作效率。</p>
<h4 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h4><p>原地修改列表对象，是真正的列表尾部添加新元素，速度最快，推荐使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">20</span>&gt;&gt;&gt; a = [<span class="number">20</span>,<span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">80</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">40</span>, <span class="number">80</span>]</span><br></pre></td></tr></table></figure>

<h4 id="运算符操作"><a href="#运算符操作" class="headerlink" title="+ 运算符操作"></a>+ 运算符操作</h4><p>并不是真正的尾部添加元素，而是<strong>创建新的列表对象，并将原列表的元素和新列表的元素依次复制到新的列表对象中</strong>。这样会涉及大量的复制操作，效率很低，不推荐使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">1449218889152</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a+[<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)</span><br><span class="line"><span class="number">1449218852224</span></span><br></pre></td></tr></table></figure>

<p>通过测试，我们发现a的地址发生了变化，也是创建了新的列表对象。</p>
<h4 id="extend-方法"><a href="#extend-方法" class="headerlink" title="extend()方法"></a>extend()方法</h4><p>将目标列表的所有元素添加到本列表的尾部，属于原地操作，不创建新的列表对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure>

<h4 id="insert-插入元素"><a href="#insert-插入元素" class="headerlink" title="insert()插入元素"></a>insert()插入元素</h4><p>对于列表这种顺序表，使用insert()方法可以将指定元素插入到列表对象的任意指定位置，这样会让插入位置后面所有元素进行移动，会影响处理速度。<strong>涉及大量元素时，尽量避免使用</strong>。类似发生这种移动的函数还有：remove()、pop()、del ，他们在删除尾部元素时也会发生操作位置后面的元素移动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure>

<h4 id="乘法扩展"><a href="#乘法扩展" class="headerlink" title="乘法扩展"></a>乘法扩展</h4><p>使用惩罚扩展列表，生成一个新列表，新列表元素是原列表元素的多次重复，可以用于列表的初始化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]*<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<h3 id="列表的删除"><a href="#列表的删除" class="headerlink" title="列表的删除"></a>列表的删除</h3><h4 id="del-删除"><a href="#del-删除" class="headerlink" title="del 删除"></a>del 删除</h4><p>删除列表指定位置的元素，甚至可以直接删除这个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">20</span>, <span class="number">30</span>]</span><br></pre></td></tr></table></figure>

<h4 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop()方法"></a>pop()方法</h4><p>pop()删除并返回指定位置(索引)元素，如果未指定位置则默认操作列表的最后一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">3</span>)</span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br></pre></td></tr></table></figure>

<h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p>删除首次出现的指定元素，若不存在该元素抛出异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">20</span>) <span class="comment"># 里面不是索引，是元素</span></span><br></pre></td></tr></table></figure>

<h3 id="列表元素的访问和计数"><a href="#列表元素的访问和计数" class="headerlink" title="列表元素的访问和计数"></a>列表元素的访问和计数</h3><h4 id="通过索引直接访问元素"><a href="#通过索引直接访问元素" class="headerlink" title="通过索引直接访问元素"></a>通过索引直接访问元素</h4><p>我们可以通过索引直接访问元素，索引的区间在[0,列表长度-1]这个范围，超过这个范围则会抛出异常。</p>
<h4 id="index-方法"><a href="#index-方法" class="headerlink" title="index()方法"></a>index()方法</h4><p>使用<strong>index()方法可以获得指定元素首次出现的索引位置，不存在则会抛出异常</strong>，语法是：<code>index(value,[start,[end]])</code>。其中，start和end指定了搜索的范围。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">10</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">50</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="number">50</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<h4 id="count-方法"><a href="#count-方法" class="headerlink" title="count()方法"></a>count()方法</h4><p>使用count()方法可以获得指定元素在列表中出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">10</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="len-方法"><a href="#len-方法" class="headerlink" title="len()方法"></a>len()方法</h4><p>len()方法用于返回列表长度，即列表中包含元素的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(a)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="成员资格判断"><a href="#成员资格判断" class="headerlink" title="成员资格判断"></a>成员资格判断</h4><p>判断列表中是否存在指定的元素，我们可以使用count()方法，返回0则表示不存在，返回大于0则表示存在。但是，一般我们会使用更加简洁的<code>in</code>关键字来判断，直接返回True或者False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">11</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><p>切片是Python序列极其重要的操作，适用于列表、元组、字符串等等。切片slice操作可以让我们快速提取子列表或修改，其格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[起始偏移量start:终止偏移量end[:步长step]]</span><br></pre></td></tr></table></figure>

<p>注：当步长省略时可以省略第二个冒号。</p>
<h3 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><h4 id="修改原列表的排序"><a href="#修改原列表的排序" class="headerlink" title="修改原列表的排序"></a>修改原列表的排序</h4><p>调用**list.sort()<strong>即可进行不建立新列表的升序排序，调用</strong>list.sort(reverse=True)**降序排序，在引用random的条件下，可实现乱序排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">50</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">30</span>]</span><br><span class="line"><span class="comment"># 升序</span></span><br><span class="line">alist.sort() </span><br><span class="line"><span class="built_in">print</span>(alist)</span><br><span class="line"><span class="comment"># 降序</span></span><br><span class="line">alist.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(alist)</span><br><span class="line"><span class="comment"># 随机序列</span></span><br><span class="line">random.shuffle(alist)</span><br><span class="line"><span class="built_in">print</span>(alist)</span><br></pre></td></tr></table></figure>

<h4 id="建新列表的排序"><a href="#建新列表的排序" class="headerlink" title="建新列表的排序"></a>建新列表的排序</h4><p>我们可以通过内置函数sorted()进行排序，这个方法返回新列表，不对原列表进行修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(alist) <span class="comment"># 升序</span></span><br><span class="line"><span class="built_in">sorted</span>(alist,reverse=<span class="literal">True</span>) <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure>

<h4 id="reversed-返回迭代器"><a href="#reversed-返回迭代器" class="headerlink" title="reversed()返回迭代器"></a>reversed()返回迭代器</h4><p>内置函数**reversed()**也支持进行逆序排列，与列表对象reverse()方法不同的是，内置函数reversed()不对原列表做任何修改，只是返回一个逆序排列的迭代器对象。</p>
<p>注意：迭代器对象进行够使用一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">reversed</span>(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;list_reverseiterator <span class="built_in">object</span> at <span class="number">0x000001E9FA573700</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(c)</span><br><span class="line">[<span class="number">30</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(c) <span class="comment"># 迭代器对象仅能够使用一次，然后指针就放到最前面了，就无法遍历了</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<h3 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h3><p>二维列表，也是二维数组（感觉比其他语言的二维数组更好表示），用于存放我们存储二维、表格的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历二维列表</span></span><br><span class="line">a = [</span><br><span class="line">        [<span class="string">&quot;AA&quot;</span>,<span class="number">1</span>,<span class="string">&quot;Atest&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;BB&quot;</span>,<span class="number">2</span>,<span class="string">&quot;BTest&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;CC&quot;</span>,<span class="number">3</span>,<span class="string">&quot;CTest&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;DD&quot;</span>,<span class="number">4</span>,<span class="string">&quot;DTest&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(a[i][j],end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python序列</tag>
      </tags>
  </entry>
  <entry>
    <title>Python速成之元素、字典和集合</title>
    <url>/2021/09/09/Python%E9%80%9F%E6%88%90%E4%B9%8B%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    <content><![CDATA[<h3 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h3><p>列表属于可变序列，可以任意修改列表中的元素。<strong>元组属于不可变序列，不能修改元组中的元素。</strong>因此，元组没有增加元素、修改元素、删除元素的方法。</p>
<span id="more"></span>

<h3 id="元组的创建"><a href="#元组的创建" class="headerlink" title="元组的创建"></a>元组的创建</h3>]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>python元素、字典和集合</tag>
      </tags>
  </entry>
  <entry>
    <title>九月一日晚日记</title>
    <url>/2021/09/02/%E4%B9%9D%E6%9C%88%E4%B8%80%E6%97%A5%E6%99%9A%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="九月一日晚日记"><a href="#九月一日晚日记" class="headerlink" title="九月一日晚日记"></a>九月一日晚日记</h2><p>现在是2021年9月1号晚上十二点多了，应该算是2号了，严格说来。</p>
<p>今天把博客又搭起来了，我有点开心，因为我终于可以有事情做了，或者说我又有动力做了。</p>
<p>之前的那个博客到期了，我也没花精力去找，就让他暂时消失吧，至少在我想复制过来之前。</p>
<span id="more"></span>

<p>之前的博客确实对我找工作帮助挺大的，说实在的，能来这边我之前一直归于我的幸运，但却是和这个总结的习惯是分不开的。</p>
<p>最近自己过的太混了，让自己有一种很强的危机感，总感觉再这么混下去就要被淘汰了，，所以我又搭建起了这个博客，希望用此行为来激发我的学习欲望吧。</p>
<p>也算是给自己一种安全感。</p>
<p>当然这个静态网页还很不完善，今晚才搭起来的，但是现在已经0：21了，有点困了。细节等明天再来搞吧。</p>
<p>我的初步想法是吧前端html js css 后端java python 啥的都学一下，刷一下leetcode，提高一下自己的编码水平。当然，学习其他的东西的总结也可以放在这个上面。</p>
<p>这个以后再说吧，</p>
<p>希望自己能够振作起来，加油！</p>
]]></content>
      <categories>
        <category>随笔日记</category>
      </categories>
      <tags>
        <tag>随笔日记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>九月二日晚日记</title>
    <url>/2021/09/03/%E4%B9%9D%E6%9C%88%E4%BA%8C%E6%97%A5%E6%99%9A%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="九月二日晚日记"><a href="#九月二日晚日记" class="headerlink" title="九月二日晚日记"></a>九月二日晚日记</h2><p>今天又12点多了，今天就不多写了，希望9/3能够开始吧。</p>
<p>从学python开始，加油！</p>
]]></content>
      <categories>
        <category>随笔日记</category>
      </categories>
      <tags>
        <tag>随笔日记</tag>
      </tags>
  </entry>
</search>
